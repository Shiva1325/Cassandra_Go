// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.3
// source: user_details.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CassandraServiceClient is the client API for CassandraService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CassandraServiceClient interface {
	SaveData(ctx context.Context, in *User, opts ...grpc.CallOption) (*Response, error)
	GetData(ctx context.Context, in *GetUserData, opts ...grpc.CallOption) (*SavedRecords, error)
}

type cassandraServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCassandraServiceClient(cc grpc.ClientConnInterface) CassandraServiceClient {
	return &cassandraServiceClient{cc}
}

func (c *cassandraServiceClient) SaveData(ctx context.Context, in *User, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/proto.CassandraService/SaveData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cassandraServiceClient) GetData(ctx context.Context, in *GetUserData, opts ...grpc.CallOption) (*SavedRecords, error) {
	out := new(SavedRecords)
	err := c.cc.Invoke(ctx, "/proto.CassandraService/GetData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CassandraServiceServer is the server API for CassandraService service.
// All implementations should embed UnimplementedCassandraServiceServer
// for forward compatibility
type CassandraServiceServer interface {
	SaveData(context.Context, *User) (*Response, error)
	GetData(context.Context, *GetUserData) (*SavedRecords, error)
}

// UnimplementedCassandraServiceServer should be embedded to have forward compatible implementations.
type UnimplementedCassandraServiceServer struct {
}

func (UnimplementedCassandraServiceServer) SaveData(context.Context, *User) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveData not implemented")
}
func (UnimplementedCassandraServiceServer) GetData(context.Context, *GetUserData) (*SavedRecords, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetData not implemented")
}

// UnsafeCassandraServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CassandraServiceServer will
// result in compilation errors.
type UnsafeCassandraServiceServer interface {
	mustEmbedUnimplementedCassandraServiceServer()
}

func RegisterCassandraServiceServer(s grpc.ServiceRegistrar, srv CassandraServiceServer) {
	s.RegisterService(&CassandraService_ServiceDesc, srv)
}

func _CassandraService_SaveData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CassandraServiceServer).SaveData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.CassandraService/SaveData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CassandraServiceServer).SaveData(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _CassandraService_GetData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CassandraServiceServer).GetData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.CassandraService/GetData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CassandraServiceServer).GetData(ctx, req.(*GetUserData))
	}
	return interceptor(ctx, in, info, handler)
}

// CassandraService_ServiceDesc is the grpc.ServiceDesc for CassandraService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CassandraService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.CassandraService",
	HandlerType: (*CassandraServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SaveData",
			Handler:    _CassandraService_SaveData_Handler,
		},
		{
			MethodName: "GetData",
			Handler:    _CassandraService_GetData_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user_details.proto",
}
